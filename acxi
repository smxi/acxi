#!/usr/bin/perl
#########################################################################
# acxi - audio conversion program
#########################################################################

# Copyright (c) 2010-2019 - Harald Hope - smxi.org 
# Home page: https://github.com/smxi/acxi
# Forum support: https://techpatterns.com/forums/about1491.html
# Download url: https://smxi.org/acxi
#
# Based on flac2ogg.pl
# Copyright (c) 2004 - Jason L. Buberel - jason@buberel.org
# Copyright (c) 2007 - Evan Boggs - etboggs@indiana.edu
# Previous Home page (gone now): 
#   http://www.buberel.org/linux/batch-flac-to-ogg-converter.php
#
# Modified: 2018-12-05 - Cleaned up code, refactored
# Modified: 2011-07-26 - Harald Hope - Added patch for $ in file names; 
#   changed verbosity levels to fit future 3 release, got rid of 
#   $B_SILENT and $b_quiet
# Modified: 2011-03-23 - Odd Eivind Ebbesen - www.oddware.net - 
#   <oddebb at gmail dot com>
#   Added functionality for Flac conversion to MP3, preserving tags.
#########################################################################
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 3 of the License, or 
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
#
# Get the full text of the GPL here: http://www.gnu.org/licenses/gpl.txt
#########################################################################
# Given a source directory tree of original lossless music files 
# (flac, wav, etc), this program will recreate (or add to) a new 
# directory tree of ogg/mp3 files by recursively encoding only new 
# source files to destination types.
# The source and destination directories can be hard-coded using the 
# $SOURCE_DIRECTORY and $DESTINATION_DIRECTORY variables, or passed on 
# the command line, or can be set in the configuration file (recommended).  
#
# See BEGIN USER MODIFIABLE VALUES for configuration information.
#########################################################################
### NO USER CHANGES IN THIS SECTION ###
#########################################################################
use strict;
use warnings;
# use diagnostics;
use 5.010;
use feature 'state';
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure ('bundling', 'no_ignore_case', 
'no_getopt_compat', 'no_auto_abbrev','pass_through');
use File::stat;
use File::Find;
use File::Copy qw(copy);
use File::Path qw(rmtree);
# only use for debugging, some distros do not ship with core modules.
#use Data::Dumper qw(Dumper);

#########################################################################
### PROGRAM GLOBALS - DO NOT TOUCH THESE! ###
#########################################################################

## SELF INFO
my $SELF_NAME = 'acxi';
my $SELF_VERSION = '3.1.4';
my $SELF_DATE = '2019-07-13';

## GLOBALS
my ($b_dest_changed,$b_clean,$b_force,$b_fork,$b_quiet,$b_test);
my ($print_line_heavy,$print_line_large,$print_line_small);
my ($quality,$silent_flac,$silent_lame,$silent_opus) = (7,'','','');
my ($extension,@extension_list,@found_list,$list_type);

## CONSTANTS
my $line_heavy = "===========================================================================\n";
my $line_small = "-----------------------------------------------------------------\n";
my $line_large = "---------------------------------------------------------------------------\n";

#########################################################################
### BEGIN USER MODIFIABLE VALUES ###
#########################################################################
# User config file at:
# Global: /etc/acxi.conf
# User override files checked in the following order (first found used):
# $XDG_CONFIG_HOME/acxi.conf, $HOME/.config/acxi.conf, $HOME/.acxi.conf
#
# Set values like this:
# Do not use the $ preceding the variable name, or the semicolon or 
# single/double quote marks in the config file. Use this syntax for 
# config files:
# SOURCE_DIRECTORY=/home/fred/music/flac
# DESTINATION_DIRECTORY=/home/fred/music/ogg
#
# It's highly recommended to create a config file so you don't have to
# update the values below every time acxi updates.
#
# Anything in configs or in this section will be overridden if you use
# a startup argument.

## APPLICATION PATHS

my $COMMAND_FLAC = '/usr/bin/flac'; 
my $COMMAND_LAME = '/usr/bin/lame';
my $COMMAND_OGG = '/usr/bin/oggenc';
my $COMMAND_OPUS = '/usr/bin/opusenc';
# metaflac is required ONLY for flac to mp3, to copy over the ID3 tags
# If you are not going to make MP3s, only OGG files for output, you do 
# not need this.
my $COMMAND_METAFLAC = '/usr/bin/metaflac';

## ASSIGN DIRECTORY PATHS
##  $SOURCE_DIRECTORY is the original, working, like flac, wav, etc
##  $DESTINATION_DIRECTORY is the processed, ie, ogg, mp3
##  CHANGE TO FIT YOUR SYSTEM - do not end in /
## IMPORTANT: DESTINATION_DIRECTORY cannot be equal to SOURCE_DIRECTORY
my $SOURCE_DIRECTORY = '/path/to/source/directory';
my $DESTINATION_DIRECTORY = '/path/to/your/output/directory';

# NOTE: only use this if you are running Windows, or any OS without $HOME
# or $XDG_CONFIG_HOME environmental variables. acxi will look for file:
# acxi.conf inside that directory. 
my $CONFIG_DIRECTORY='';

## INPUT/OUTPUT
# The following are NOT case sensitive,ie flac/FLAC, txt/TXT will be 
# found. INPUT_TYPE and OUTPUT_TYPE will be forced to lower case 
# internally.
my $INPUT_TYPE = 'flac';
my $OUTPUT_TYPE = 'ogg';

# For mp3: n can be 0-9 (variable bit rate), 0 is largest file / highest quality
# For ogg: n can be between -1 and 10. Fractions allowed. 10 is the largest file 
# size / highest quality. 
# For opus: n can be 6-256. 256 is the largest file size / highest quality / 
# maximum bitrate. For flac 0-8 [0 biggest size, fastest]

my $QUALITY_FLAC = 4;
my $QUALITY_MP3 = 3;
my $QUALITY_OGG = 7;
my $QUALITY_OPUS = 160;
## NOTE: if you want to override $COPY_TYPES in your config files, you
# must use this syntax:
# COPY_TYPES=doc,docx,bmp,jpg,jpeg
# Add or remove types to copy over to ogg directories, do not include
# the input/output audio file types, only extra data types like txt.
# If you want no copying done, simply change to: $COPY_TYPES = 'none';
my $COPY_TYPES = 'bmp,doc,docx,gif,jpg,jpeg,odt,pdf,png,tif,txt';

# You can turn these to always on either here or in config file by setting to 
# desired verbosity level here directly, or in config file. 
# 0 = quiet/silent - no output at all; 
# 1 = default - single line per operation. This is the default, so you don't need 
#     to change it.
# 2 = verbose - but without the actual conversion data from codecs
# 3 = debug -  all available information.
my $LOG_LEVEL = 1;

## ADVANCED
# Only change to 0 if you encounter file tree failures. This is for File::Find
# values:  0 - use nlink; 1 - don't use nlink [default, only change if you know
# why.
my $DONT_USE_NLINK = 1;

## number of forks/threads to use. 1 is default, and will not use forking
my $FORK = 1;

#########################################################################
### END USER MODIFIABLE VALUES ###
#########################################################################

### MAIN - FUNCTIONS ###
sub error_handler {
	my ($error,$message) = @_;
	my ($br,$error_text,$b_exit) = ("\n",'',1);
	state $b_valid = 1;
	state $error_no = 0;
	if ($error eq 'unsupported-type'){$error_no = 2;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'dest-dir'){$error_no = 1;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'dest-eq-src-dir'){$error_no = 9;$b_exit=0;$b_valid=0;$br=''}
	elsif ($error eq 'missing-app'){$error_no = 3;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'quality-invalid'){$error_no = 4;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'bad-level'){$error_no = 5;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'bad-fork'){$error_no = 9;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'bad-nlink'){$error_no = 9;$b_exit=0;$b_valid=0;}
	elsif ($error eq 'stat-infile'){$error_no = 6;}
	elsif ($error eq 'missing-arg'){$error_no = 7;
		$message = "Option: $message";$br=''}
	elsif ($error eq 'unsupported-option'){$error_no = 8;$br=''}
	elsif ($error eq 'missing-perl-module'){$error_no = 10;
		$message = "Perl Module not found in system: $message";}
	if ($error eq 'validation-errors'){
		if (!$b_valid ){
			$message = "${br}Failed pretests. Please correct the listed errors.\n";
		}
		else {
			$message = "Pretests passed. Continuing.\n" if $LOG_LEVEL > 0;
			$b_exit = 0;
		}
	}
	else {
		$message = "${br}Error $error_no: $message\n";
	}
	print "$message" if $message;
	exit $error_no if $b_exit;
}

### SET DATA ###
sub set_basic_data {
	# if --copy/-c is set, then use that data instead of default copy types
	if ( defined $COPY_TYPES ){
		@extension_list = split( /,\s*/, $COPY_TYPES );
	}
	$DESTINATION_DIRECTORY =~ s|/$||;
	$SOURCE_DIRECTORY =~ s|/$||;
	$CONFIG_DIRECTORY =~ s|/$|| if $CONFIG_DIRECTORY;
	$INPUT_TYPE = lc($INPUT_TYPE) if $INPUT_TYPE;
	$OUTPUT_TYPE = lc($OUTPUT_TYPE) if $OUTPUT_TYPE;
	@extension_list = (@extension_list,$INPUT_TYPE);
	$File::Find::dont_use_nlink = $DONT_USE_NLINK;
	if ( $FORK > 1 ){
		if (!check_module('Parallel::ForkManager')){
			error_handler('missing-perl-module', 'Parallel::ForkManager');
		}
		else {
			import Parallel::ForkManager;
			$b_fork = 1;
		}
	}
}
sub set_display_output_data {
	if ( $LOG_LEVEL < 3 ) {
		if ( $OUTPUT_TYPE eq 'mp3' ) {
			$silent_flac = '--silent'; # flac output 
			$silent_lame = '--silent'; # lame output
		}
		elsif ( $OUTPUT_TYPE eq 'ogg' ) {
			$silent_flac = '--quiet'; # for oggenc output
		}
		elsif ( $OUTPUT_TYPE eq 'opus' ) {
			$silent_opus = '--quiet'; # for oggenc output
		}
	}
	if ( $LOG_LEVEL < 2 ) {
		$print_line_heavy = '';
		$print_line_large = '';
		$print_line_small = '';
	}
	else {
		$print_line_heavy = 'print $line_heavy';
		$print_line_large = 'print $line_large';
		$print_line_small = 'print $line_small';
	}
}

### VALIDATIONS ###
sub validate_start_text {
	if ( $LOG_LEVEL > 0 ) {
		eval $print_line_heavy;
		print "Running $SELF_NAME pretests.\n";
	}
}
sub validate_in_out_types {
	my ($b_error, $error_message) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		eval $print_line_large;
		print dotify("Checking input and output types");
	}
	if ( $INPUT_TYPE !~ m/^(flac|wav|raw)$/i ){
		$b_error = 1;
		$error_message .= "\n  The input type you entered is not supported: ";
		$error_message .= "$INPUT_TYPE";
	}
	if ( $OUTPUT_TYPE !~ m/^(ogg|mp3|opus)$/i ){
		$b_error = 1;
		$error_message .= "\n  The output type you entered is not supported: ";
		$error_message .= "$OUTPUT_TYPE";
		if ( $OUTPUT_TYPE eq 'mp3' && $INPUT_TYPE ne 'flac' ){
			$b_error = 1;
			$error_message .= "\n  The output type $OUTPUT_TYPE you entered ";
			$error_message .= "currently only supports input type: flac";
		}
	}
	if ( $b_error ){
		error_handler('unsupported-type',$error_message);
	}
	else {
		if ( $LOG_LEVEL > 0 ) {
			print "Valid: $INPUT_TYPE(in) $OUTPUT_TYPE(out)\n";
		}
		validate_quality();
		validate_application_paths();
	}
}
sub validate_src_dest_directories {
	my ($b_error, $missing_dirs) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		eval $print_line_large;
		print dotify("Checking source / destination directories");
	}
	if ( ! -d "$SOURCE_DIRECTORY" ){
		$b_error = 1;
		$missing_dirs .= "\n  Source Directory: $SOURCE_DIRECTORY";
	}
	if ( ! -d "$DESTINATION_DIRECTORY" ){
		$b_error = 1;
		$missing_dirs .= "\n  Destination Directory: $DESTINATION_DIRECTORY";
	}
	if ( $b_error ) {
		my $error_message = "The paths for the following directories are missing:";
		$error_message .= "$missing_dirs";
		$error_message .= "\nPlease check the directory paths you provided.";
		error_handler('dest-dir',$error_message);
	} 
	elsif ( $LOG_LEVEL > 0 ) {
		print "Directories: exist\n";
	}
	if (!$b_error && $DESTINATION_DIRECTORY eq $SOURCE_DIRECTORY){
		error_handler('dest-eq-src-dir',"Destination directory cannot be same as Source directory!");
	}
}
sub validate_application_paths {
	my ($b_error, $error_message, $app_paths) = (0,'',''); 
	if ( $LOG_LEVEL > 0 ) {
		print dotify("Checking audio conversion tool path");
	}
	if ( $OUTPUT_TYPE eq 'ogg' ) {
		$app_paths .= "\n $COMMAND_OGG";
		if ( ! -x "$COMMAND_OGG" ) {
			$b_error = 1;
			$error_message .= "\n  Encoding application not available: $COMMAND_OGG";
		}
	}
	elsif ( $OUTPUT_TYPE eq 'opus' ) {
		$app_paths .= "\n $COMMAND_OPUS";
		if ( ! -x "$COMMAND_OPUS" ) {
			$b_error = 1;
			$error_message .= "\n  Encoding application not available: $COMMAND_OPUS";
		}
	}
	elsif ( $OUTPUT_TYPE eq 'mp3' ) {
		$app_paths .= "\n $COMMAND_LAME ";
		if ( ! -x "$COMMAND_LAME" ) {
			$b_error = 1;
			$error_message .= "\n  Encoding application not available: $COMMAND_LAME";
		}
		if ($INPUT_TYPE eq 'flac') {
			$app_paths .= "$COMMAND_FLAC ";
			if ( ! -x "$COMMAND_FLAC" ) {
				$b_error = 1;
				$error_message .= "\n  Input processor $COMMAND_FLAC needed by lame ";
				$error_message .= "not available.";
			}
			$app_paths .= "$COMMAND_METAFLAC ";
			# Added: Odd @2011-03-23 01:55:28
			if ( ! -x "$COMMAND_METAFLAC" ) {
				$b_error = 1;
				$error_message .= "\n  $COMMAND_METAFLAC not found. Required to copy ";
				$error_message .= "ID3 tags from Flac to MP3.";
			}
		}
		else {
			$b_error = 1;
			$error_message .= "\n  $COMMAND_LAME currently only supports ";
			$error_message .= "flac as input.";
		}
	}
	if ( $b_error ) {
		error_handler('missing-app',$error_message);
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Available: $app_paths\n";
	}
}
sub validate_quality{
	my ($b_error, $error_message) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		print dotify("Checking quality support for $OUTPUT_TYPE");
	}
	if ( lc($OUTPUT_TYPE) eq 'ogg') {
		if ($QUALITY_OGG !~ m/^-?[0-9]+(\.[0-9]+)?$/ || 
		 $QUALITY_OGG < -1 || $QUALITY_OGG > 10 ) {
			$b_error = 1;
			$error_message .= "\n  $OUTPUT_TYPE only supports ";
			$error_message .= "-1 to 10 quality levels. You entered: $QUALITY_OGG";
		}
		else {
			$quality = $QUALITY_OGG;
		}
	}
	# supports fractional quality levels
	elsif ( lc($OUTPUT_TYPE) eq 'opus') {
		if ($QUALITY_OPUS !~ m/^[0-9]+$/ || $QUALITY_OPUS < 6|| $QUALITY_OPUS > 256 ){
			$b_error = 1;
			$error_message .= "\n  $OUTPUT_TYPE only supports ";
			$error_message .= "6 to 256 bitrate quality levels. You entered: $QUALITY_OPUS";
		}
		else {
			$quality = $QUALITY_OPUS;
		}
	}
	elsif ( lc($OUTPUT_TYPE) eq 'mp3') {
		if ( $QUALITY_MP3 !~ m/^[0-9]$/ ) {
			$b_error = 1;
			$error_message .= "\n  $OUTPUT_TYPE only supports 0-9 quality levels. ";
			$error_message .= "You entered: $QUALITY_MP3";
		}
		else {
			$quality = $QUALITY_MP3;
		}
	}
	if ( $b_error ) {
		error_handler('quality-invalid',$error_message);
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Supported: $quality ($OUTPUT_TYPE)\n";
	}
}
sub validate_log_level {
	my ($b_error, $error_message) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		print dotify("Checking log/screen output level");
	}
	if ( $LOG_LEVEL !~ m/^([0-3])$/ ) {
		$b_error = 1;
		$error_message .= "\n  LOG_LEVEL only supports 0-3. ";
		$error_message .= "You used: $LOG_LEVEL";
	}
	if ( $b_error ) {
		error_handler('bad-level',$error_message);
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Supported: $LOG_LEVEL\n";
	}
}
sub validate_nlink {
	my ($b_error, $error_message) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		print dotify("Checking DONT_USE_NLINK value");
	}
	if ( $DONT_USE_NLINK !~ m/^[01]$/ ) {
		$b_error = 1;
		$error_message .= "\n  DONT_USE_NLINK only supports 0-1. ";
		$error_message .= "You used: $DONT_USE_NLINK";
	}
	if ( $b_error ) {
		error_handler('bad-nlink',$error_message);
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Supported: $DONT_USE_NLINK\n";
	}
}
sub validate_fork {
	my ($b_error, $error_message) = (0,'');
	if ( $LOG_LEVEL > 0 ) {
		print dotify("Checking FORK value");
	}
	if ( $FORK !~ m/^[0-9]+$/ || $FORK == 0) {
		$b_error = 1;
		$error_message .= "\n  FORK requires value: 2 or more. ";
		$error_message .= "You used: $FORK";
	}
	if ( $b_error ) {
		error_handler('bad-fork',$error_message);
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Supported: $FORK\n";
	}
}

### CLEAN/SYNC MUSIC DIRECTORIES ###
sub clean_destination {
	my (@extension_files);
	print $line_large;
	print "Starting cleanup of $DESTINATION_DIRECTORY...\n";
	clean_destination_items('directory');
	clean_destination_items('file');
	print $line_small;
	print "Completed cleanup checks.\n";
	print $line_large;
}
sub clean_destination_items {
	my ($type) = @_;
	my ($b_deleted,$item,$result);
	$list_type = ($type eq 'directory') ? 'dir-clean': 'file-clean';
	@found_list = ();
	print $line_small;
	print "Checking $type removal...\n";
	File::Find::find( \&wanted, $DESTINATION_DIRECTORY);
	if (@found_list && confirm_clean($type)){
		foreach $item (@found_list) {
			$result = 'UNSET';
			print "Deleting $type: $item\n";
			$result = rmtree("$item") if !$b_test;
			$b_deleted = 1;
			$b_dest_changed = 1;
			print "Delete $type result: $result\n" if $LOG_LEVEL > 1;
		}
	}
	print_not_found("$type-cleaned") if ! $b_deleted;
}
sub confirm_clean {
	my ($type) = @_;
	my ($b_confirm,$response) = (0,'');
	print $line_small;
	print join("\n", @found_list),"\n";
	print $line_small;
	print "The preceding $type items will be deleted. Deletions cannot\n";
	print "be restored! BE AWARE!!\n";
	print "Please type 'delete' + 'enter' to remove them, or hit 'enter' to skip.\n";
	print "If you are unsure, hit 'enter' to see the file list.\n" if $type eq 'directory';
	chomp($response = <STDIN>);
	if (lc($response) eq 'delete'){
		print "Are you SURE you want to delete these items?\n";
		print "Type 'yes' + 'enter' to confirm, or hit 'enter' to skip.\n";
		chomp($response = <STDIN>);
		return 1 if lc($response) eq 'yes';
	}
	print "Skipping deletion for this $type group.\n";
	return 0;
}
sub sync_music_collections {
	my (@extension_files);
	eval $print_line_heavy;
	if ( $LOG_LEVEL > 1 ) {
		print "Syncing $DESTINATION_DIRECTORY (destination) with\n";
		print "        $SOURCE_DIRECTORY (source)...\n";
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "Starting sync of $SOURCE_DIRECTORY\n to $DESTINATION_DIRECTORY\n";
	}
	sync_collection_directories();
	$list_type = 'file';
	foreach (@extension_list) {
		eval $print_line_large;
		$extension = $_;
		@found_list = ();
		File::Find::find( \&wanted, $SOURCE_DIRECTORY);
		# print Dumper \@found_list;
		if ( $LOG_LEVEL > 1 ) {
			print "PROCESSING DATA TYPE: $extension\n";
		}
		elsif ( $LOG_LEVEL > 0 ) {
			print "\n" . dotify("Processing $extension data type");
		}
		if (@found_list){
			sync_collection_files();
		}
		else {
			print_not_found('extension');
		}
	}
}
# Recreate the directory hierarchy.
sub sync_collection_directories {
	my ($b_created,$dest_dir,$dir,$result);
	$list_type = 'dir';
	@found_list = ();
	File::Find::find( \&wanted, "$SOURCE_DIRECTORY");
	eval $print_line_large;
	# print Dumper \@found_list;
	if ( $LOG_LEVEL > 1 ) {
		print "Checking if $SELF_NAME needs to create destination directories...\n";
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print dotify("Updating destination directories");
	}
	foreach $dir (@found_list) {
		#print "\nd1:$dir\n";
		$result = 'UNSET';
		next if $dir eq $SOURCE_DIRECTORY || $dir eq $DESTINATION_DIRECTORY;
		$dir =~ s|^$SOURCE_DIRECTORY/||; # strip out source path
		next if !$dir;
		$dest_dir = "$DESTINATION_DIRECTORY/$dir";
		#print "d2:$dir\n";
		# check to see if the destination dir already exists
		if ( ! stat("$dest_dir") ) {
			# stat failed so create the directory
			eval $print_line_small;
			if ( $LOG_LEVEL > 1 ) {
				print "CREATING NEW DIRECTORY:\n $dest_dir\n";
			}
			elsif ( $LOG_LEVEL > 0 ) {
				print "\nCreating new directory: $dest_dir";
			}
			$dest_dir =~ s/\`/\'/g; # get rid of weird characters
			$result = mkdir("$dest_dir") if !$b_test;
			$b_created = 1;
			$b_dest_changed = 1;
			print "Create Directory result: $result\n" if $LOG_LEVEL > 1;
		}
	}
	print_not_found('dirs') if ! $b_created;
}
sub convert_file { 
	my ($result,$cmd,$action) = (1000,'','unset'); 
	my ($src_file, $dest_file) = @_;
	if ( $OUTPUT_TYPE eq 'ogg' ){
		$action = 'To ogg';
		if (!$b_test){
			qx($COMMAND_OGG $silent_flac -q $quality -o "$dest_file" "$src_file");
			$result = $?;
		}
	}
	elsif ( $OUTPUT_TYPE eq 'opus' ){
		$action = 'To opus';
		if (!$b_test){
			qx($COMMAND_OPUS $silent_opus --bitrate $quality "$src_file" "$dest_file");
			$result = $?;
		}
	}
	elsif ( $OUTPUT_TYPE eq 'mp3' ){
		$action = 'To mp3';
		# Modified: Odd @2011-03-23 01:51:26 - Include ID3 copying
		$cmd = flac2mp3_cmd("$src_file","$dest_file");
		if (!$b_test){
			qx($cmd);
			$result = $?;
		}
	}
	return ($result,$action); 
}
sub sync_collection_files {
	my ($b_created,$result);
	my ($action,$dest_file,$file,$src_file) = ('','','','');
	my ($dest_info,$dest_mod_time,$src_info, $src_mod_time) = ('',0,'',0);
	my $pm = new Parallel::ForkManager($FORK) if $b_fork;
	foreach $file (@found_list) {
		next if ! $file;
		$dest_file = $src_file = $file;
		#print "\nIF: $src_file\n";
		$dest_file =~ s|^$SOURCE_DIRECTORY|$DESTINATION_DIRECTORY|;
		$dest_file =~ s/\`/\'/g;
		# $dest_file =~ s/\$/\\\$/g;
		# get rid of escape sequences in case someone used them: \40
		# $src_file =~ s/\0//g; 
		$dest_file =~ s/\0//g;
		# Figure out what the destination file would be...
		if ( lc($extension) eq $INPUT_TYPE ){
			$dest_file =~ s/\.$INPUT_TYPE$/\.$OUTPUT_TYPE/i;
		}
		#print "OF: $dest_file\n";
		($result,$dest_mod_time,$src_mod_time ) = ('UNSET',0,0);
		# Now stat the destinationFile, and see if it's date is more recent
		# than that of the original file. If so, we re-encode.
		# We also re-encode if the user supplied --force
		$src_info = stat("$src_file") or 
		  error_handler('stat-infile', "No $src_file: $!");
		$src_mod_time = $src_info->mtime if $src_info;
		$dest_info = stat("$dest_file");
		if ( $dest_info ) {
			$dest_mod_time = $dest_info->mtime;
			# print "DEST_MOD: $dest_mod_time :: SRC_MOD: $src_mod_time :: FORCE: $force\n"; 
# 		} else {
# 			print "NOT EXISTS: $destinationFile \n"; 
# 			print "P1: $file ==> \n  $destinationFile\n"; 
		}
		# If the destination file does not exist, or the user specified force,
		# or the srcfile is more recent then the dest file, we encode/copy.
		# print "src-mt: $src_mod_time dest-mt:$dest_mod_time\n";
		if ( !$dest_info || $b_force || ( $src_mod_time > $dest_mod_time) ) {
			eval $print_line_small;
			if ( lc($extension) eq $INPUT_TYPE ){
				if ( $LOG_LEVEL > 1 ) {
					print "ENCODE: $src_file ==> \n";
					print "        $dest_file\n"; 
				}
				elsif ( $LOG_LEVEL > 0 ) {
					# add line break only when file exists
					print dotify("\nEncoding $src_file to $OUTPUT_TYPE");
				}
				$src_file =~ s/"/\\"/g;
				$dest_file =~ s/"/\\"/g;
				$src_file =~ s/\$/\\\$/g;
				$dest_file =~ s/\$/\\\$/g;
				$pm->start and next if $b_fork; # do the fork 
				my @returns = convert_file($src_file, $dest_file);
				$result = $returns[0];
				$action = $returns[1];
				$pm->finish if $b_fork;
			} 
			else {
				$action = 'Copy';
				if ( $LOG_LEVEL > 1 ) {
					print "COPY: $file ==> \n";
					print "      $dest_file\n"; 
				}
				elsif ( $LOG_LEVEL > 0 ) {
					print "\nCopying $file...";
				}
				if (!$b_test){
					$result = copy($src_file, $dest_file) or 
					  error_handler('cp-file', "cp failure: $src_file =>\n$dest_file\nCode: $!");
				}
			}
			$b_created = 1;
			$b_dest_changed = 1;
			print "$action result: $result\n" if $LOG_LEVEL > 1;
		} 
	}
	# wait for all the forks to finish before terminating 
	# the parent.. otherwise terminating the parent force kills 
	# all the forks 
	$pm->wait_all_children if $b_fork;
	print_not_found('files') if ! $b_created;
}

# Added: Odd @2011-03-23 01:52:31
sub flac2mp3_cmd {
	my ($i_file, $o_file) = @_;
	my %tags = get_flac_tags("$i_file");
	# print Dumper \%tags;
	if ($tags{'TRACKNUMBER'} && $tags{'TRACKTOTAL'}){
		$tags{'TRACKNUMBER'} .= "/$tags{'TRACKTOTAL'}";
	}
	my $lame_params = "--ta \"$tags{'ARTIST'}\" --tl \"$tags{'ALBUM'}\"";
	$lame_params .= " --tt \"$tags{'TITLE'}\" --tg \"$tags{'GENRE'}\"";
	$lame_params .= " --ty \"$tags{'DATE'}\" --tn \"$tags{'TRACKNUMBER'}\" - \"$o_file\"";
	# $lame_params .= " --tt \"$tags{'TRACKTOTAL'}\" --tg \"$tags{'DISKNUMBER'}\"";
	my $cmd = "$COMMAND_FLAC $silent_flac -d -c \"$i_file\" | ";
	$cmd .= "$COMMAND_LAME $silent_lame -h -V $quality $lame_params";
	return $cmd;
}

# Added: Odd @2011-03-23 01:52:17
# For this function to work reliably, it should be passed tag queries in the order of:
# artist, album, title, genre, date, tracknumber
sub get_flac_tags {
	my ($i_file) = @_;
	my (%tag_list,@working);
	my @tags = ("ARTIST", "ALBUM", "TITLE","GENRE", "DATE", "TRACKNUMBER", 
	"TRACKTOTAL","DISKNUMBER","LYRICS");
	my $cmd = "$COMMAND_METAFLAC \"$i_file\" --show-tag=\"$tags[0]\"";
	$cmd .= " --show-tag=\"$tags[1]\" --show-tag=\"$tags[2]\" --show-tag=\"$tags[3]\"";
	$cmd .= " --show-tag=\"$tags[4]\" --show-tag=\"$tags[5]\"";
	$cmd .= " --show-tag=\"$tags[6]\" --show-tag=\"$tags[7]\"";
	my @orig_tags = qx($cmd);
	chomp @orig_tags;
	foreach (@orig_tags) {
		@working = split /=/,$_;
		$tag_list{$working[0]} = $working[1];
	}
	# create missing hash keys
	foreach (@tags){
		$tag_list{$_} = '' if ! defined $tag_list{$_};
	}
	# print Dumper \%tag_list;
	return %tag_list;
}

### UTILITIES ###
# NOTE: File::Find will not follow symbolic links
sub wanted {
	return if -l; # skip symbolic links
	if ($list_type eq 'dir' || $list_type eq 'file'){
		return if $File::Find::name =~ m/^$DESTINATION_DIRECTORY/;
		return if $File::Find::name =~ m/\/\./; # skip any dot files/directories
		if ($list_type eq 'dir'){
			return if ! -d; # only directories
		}
		elsif ($list_type eq 'file') {
			return if -d; # skip directories
			return if $File::Find::name !~ /\.$extension$/i;
		}
	}
	elsif ($list_type eq 'dir-clean' || $list_type eq 'file-clean'){
		if ($list_type eq 'dir-clean') {
			return if ! -d; # skip non directories
		}
		else {
			return if -d; # skip non directories
		}
		my $working = $File::Find::name;
		$working =~ s|^$DESTINATION_DIRECTORY|$SOURCE_DIRECTORY|;
		$working =~ s/\.$OUTPUT_TYPE$/\.$INPUT_TYPE/i if $list_type eq 'file-clean';
		#print '1: ', "$File::Find::name\n$working\n";
		return unless ! -e $working && -e $File::Find::name;
		# print '2: ', "$File::Find::name\n";
	}
	# print $File::Find::name . "\n";
	push (@found_list, $File::Find::name);
	return;
}
# $1 - Perl module to check
sub check_module {
	my ($module) = @_;
	my $b_present = 0;
	eval "require $module";
	$b_present = 1 if !$@;
	return $b_present;
}
sub dotify {
	my $string = $_[0];
	while (length($string) < 53){
		$string .= '.';
	}
	$string .= ' ';
	return $string;
}
sub print_not_found {
	my ($message,$none);
	if ( $_[0] eq 'files'){
		$message = "No files to update of type: $extension\n";
		$none = "None to update";
	}
	elsif ( $_[0] eq 'extension'){
		$message = "No files found of type: $extension\n";
		$none = "None found";
	}
	elsif ($_[0] eq 'dirs') {
		$message = "No new directories required. Continuing...\n";
		$none = "None required";
	}
	elsif ($_[0] eq 'directory-cleaned') {
		$message = "No directories to remove. Continuing...\n";
		$none = "None to remove\n";
	}
	elsif ($_[0] eq 'file-cleaned') {
		$message = "No files to remove. Continuing...\n";
		$none = "None to remove\n";
	}
	if ( $LOG_LEVEL > 1 ) {
		print $message;
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print $none;
	}
}
sub print_completion_message {
	eval $print_line_heavy;
	if ( $b_dest_changed ) {
		if ( $LOG_LEVEL > 1 ) {
			print "All done updating. Enjoy your music!\n";
		}
		elsif ( $LOG_LEVEL > 0 ) {
			print "\nUpdating completed. Enjoy your music!\n";
		}
	}
	elsif ( $LOG_LEVEL > 0 ) {
		print "\nThere was nothing to update today in your collection.\n";
	}
	exit 0;
}

### PRINT HELP/VERSION ###
sub print_help {
	# so it shows the user config data if present
	set_config_data(); 
	# but this should override the config data so follows
	set_basic_data();
	my $output = "$SELF_NAME v: $SELF_VERSION :: Supported Options:\n";
	$output .= "Examples: $SELF_NAME -q 8 --destination /music/main/ogg\n";
	$output .= "$SELF_NAME --input wav --output ogg\n";
	$output .= "$SELF_NAME --copy doc,docx,bmp\n";
	$output .= $line_small;
	$output .= "--clean           Clean directories and files from destination not found in\n";
	$output .= "                  source music directory. Will show you directories/files to\n";
	$output .= "                  be deleted then ask you to confirm (twice) that you want to\n";
	$output .= "                  remove that set of files or directories.\n";
	$output .= "--copy, -c        List of alternate data types to copy to Output type\n";
	$output .= "                  directories. Must be comma separated, no spaces, \n";
	$output .= "                  see sample above. Your current copy types are:\n";
	$output .= "                  @extension_list\n";
	$output .= "--debug           Full screen output, including full verbosity of \n";
	$output .= "                  flac/lame/oggenc/opusenc conversion process for mp3, ogg,\n";
	$output .= "                  or opus output.\n";
	$output .= "--default         Single line per operation screen output, default value for\n";
	$output .= "                  $SELF_NAME.\n";
	$output .= "--destination, -d Path to the directory where you want the processed\n";
	$output .= "                  (eg, ogg) files to go.\n";
	$output .= "                  Your current default is: $DESTINATION_DIRECTORY\n";
	$output .= "--force, -f       Force overwrite the mp3/ogg/opus/jpg/txt/etc. files, even\n"; 
	$output .= "                  if they already exist.\n";
	$output .= "--fork            [2-x] - Number of forks/threads to use.\n";
	$output .= "                  Requires Perl module: Parallel::ForkManager\n";
	$output .= "--help, -h        This help menu.\n";
	$output .= "--input, -i       Input type: supported - flac, wav, raw. mp3 only supports\n";
	$output .= "                  flac input. Your current default is: $INPUT_TYPE\n";
	$output .= "--nlink           Set \$File::Find::dont_use_nlink = 0. Only use if you know why.\n";
	$output .= "--no-nlink        Set \$File::Find::dont_use_nlink = 1 [default].\n";
	$output .= "                  Only use if you know why.\n";
	$output .= "--output, -o      Output type: supported - mp3, ogg, opus\n";
	$output .= "                  Your current default is: $OUTPUT_TYPE\n";
	$output .= "--quality n, -q n For ogg: n between -1 and 10. Fractions ok.\n";
	$output .= "                  10 highest quality.\n";   
	$output .= "                  For opus: n is (variable) bitrate, between 6-256.\n";
	$output .= "                  (256 highest quality).\n";
	$output .= "                  For mp3: n between 0-9 (variable bit rate), 0 highest quality.\n";
	$output .= "                  Current defaults: $QUALITY_MP3 (mp3); $QUALITY_OGG (ogg); $QUALITY_OPUS (opus)\n";
	$output .= "--quiet, --silent Turns off all screen output, except for error messages.\n";
	$output .= "--source, -s      Path to the top-most directory containing your source files\n";
	$output .= "                  (eg, flac). Your current default is: $SOURCE_DIRECTORY\n";
	$output .= "--verbose, -V     Without full verbosity of debug, no flac/lame/oggenc/opusenc\n";
	$output .= "                  for mp3, ogg or opus conversion process screen output,\n";
	$output .= "                  but more verbose than default.\n";
	$output .= "--test            Test copy and sync without actually doing the copy/sync. Also\n";
	$output .= "                  activates --debug for more complete path outputs.\n";
	$output .= "--version, -v     Show $SELF_NAME version.\n\n";
	$output .= $line_small;
	$output .= "User Configs ";
	if (!$CONFIG_DIRECTORY){
		$output .= "(checked in this order):\n/etc/$SELF_NAME.conf\n";
		$output .= "\$XDG_CONFIG_HOME/$SELF_NAME.conf\n";
		$output .= "\$HOME/.config/$SELF_NAME.conf\n";
		$output .= "\$HOME/.$SELF_NAME.conf\n";
	}
	else {
		$output .= "(manually set):\n$CONFIG_DIRECTORY/$SELF_NAME.conf\n";
	}
	$output .= "Requires this syntax (any user modifiable variable can be used)\n";
	$output .= "DIR_PREFIX_SOURCE=/home/me/music/flac\n";
	$output .= "Do not use \$, \", or \' in config options or values.\n";
	$output .= "\n";
	print $output;
	exit 0;
}
sub print_version {
	print "$SELF_NAME version: $SELF_VERSION ($SELF_DATE)\n";
	exit 0;
}

### SET PROGRAM DATA ###
sub set_config_data {
	my (@config_files,$file,$user_config);
	# set list of supported config files
	@config_files = ("/etc/$SELF_NAME.conf");
	if ($ENV{'XDG_CONFIG_HOME'} && -r "$ENV{XDG_CONFIG_HOME}/$SELF_NAME.conf"){
		$user_config = "$ENV{'XDG_CONFIG_HOME'}/$SELF_NAME.conf";
	}
	elsif ( -r "$ENV{HOME}/.config/$SELF_NAME.conf"){
		$user_config = "$ENV{HOME}/.config/$SELF_NAME.conf";
	}
	elsif (-r "$ENV{HOME}/.$SELF_NAME.conf"){
		$user_config = "$ENV{HOME}/.$SELF_NAME.conf";
	}
	elsif (-r "$CONFIG_DIRECTORY/$SELF_NAME.conf"){
		$user_config = "$CONFIG_DIRECTORY/$SELF_NAME.conf";
	}
	@config_files = (@config_files,$user_config) if $user_config;
	foreach $file (@config_files) {
		next unless -r $file && open (my $fh,'<',$file);
		while (<$fh>) {
			chomp;                  # no newline
			s/#.*//;                # no comments
			s/^\s+//;               # no leading white
			s/\s+$//;               # no trailing white
			s/('|"|\$|\s)//g;       # get rid of all non valid characters
			next unless length;     # anything left?
			my ($var, $value) = split(/\s*=\s*/, $_, 2);
			if (defined $var && defined $value){
				assign_config_value($var, $value);
			}
		}
	}
}
sub assign_config_value {
	my ($var,$value) = @_;
	if ($var eq 'COMMAND_FLAC'){$COMMAND_FLAC = $value;}
	elsif ($var eq 'COMMAND_LAME'){$COMMAND_LAME = $value;}
	elsif ($var eq 'COMMAND_METAFLAC'){$COMMAND_METAFLAC = $value;}
	elsif ($var eq 'COMMAND_OGG'){$COMMAND_OGG = $value;}
	elsif ($var eq 'COMMAND_OPUS'){$COMMAND_OPUS = $value;}
	elsif ($var eq 'CLEAN'){
		$value =~ s/^(yes|1|true|enable|on)$/1/;
		$value =~ s/^(no|0|false|disable|off)$/0/;
		$b_clean = $value if $value =~ /^[10]$/;}
	elsif ($var eq 'SOURCE_DIRECTORY' || $var eq 'DIR_PREFIX_SOURCE'){
		$SOURCE_DIRECTORY = $value;}
	elsif ($var eq 'DESTINATION_DIRECTORY' || $var eq 'DIR_PREFIX_DEST'){
		$DESTINATION_DIRECTORY = $value;}
	elsif ($var eq 'INPUT_TYPE'){$INPUT_TYPE = $value;}
	elsif ($var eq 'LOG_LEVEL'){$LOG_LEVEL = $value;}
	elsif ($var eq 'OUTPUT_TYPE'){$OUTPUT_TYPE = $value;}
	# legacy configs, sets both
	elsif ($var eq 'QUALITY'){$QUALITY_OGG = $value;$QUALITY_MP3 = $value}
	elsif ($var eq 'QUALITY_FLAC'){$QUALITY_FLAC = $value}
	elsif ($var eq 'QUALITY_MP3'){$QUALITY_MP3 = $value}
	elsif ($var eq 'QUALITY_OGG'){$QUALITY_OGG = $value;}
	elsif ($var eq 'QUALITY_OPUS'){$QUALITY_OPUS = $value;}
	elsif ($var eq 'COPY_TYPES' || $var eq 'USER_TYPES'){
		$COPY_TYPES = $value;}
	elsif ($var eq 'DONT_USE_NLINK'){$DONT_USE_NLINK = $value}
	elsif ($var eq 'FORK'){$FORK = $value}
}
# get defaults from user config files if present
set_config_data();
# Get Options and set values, this overrides defaults 
# from top globals and config files
GetOptions (
	"clean" => sub { 
		$b_clean = 3 },
	# accepts null value so users can not copy anything
	"c|copy:s" => sub { 
		my ($opt,$arg) = @_;
		$COPY_TYPES = $arg;},
	"debug" => sub { 
		$LOG_LEVEL = 3 },
	"default" => sub { 
		$LOG_LEVEL = 1 },
	"d|destination:s" => sub { 
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires path.") if ! $arg;
		$DESTINATION_DIRECTORY = $arg },
	"f|force" => sub { 
		$b_force = 1 },
	"fork:i" => sub { 
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires number of forks.") if ! $arg;
		$FORK = $arg; },
	"h|help|?" => sub { 
		print_help();},
	"i|input:s" => sub { 
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires type.") if ! $arg;
		$INPUT_TYPE = $arg },
	"o|output:s" => sub {
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires type.") if ! $arg;
		$OUTPUT_TYPE = $arg;},
	"nlink" => sub { 
		$DONT_USE_NLINK = 0 },
	"no-nlink" => sub { 
		$DONT_USE_NLINK = 1 },
	"q|quality:f" => sub { 
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires number.") if ! defined $arg || $arg !~ /^-?[0-9\.]+$/;
		# validate these later
		$QUALITY_FLAC = $arg;
		$QUALITY_MP3 = $arg;
		$QUALITY_OGG = $arg;
		$QUALITY_OPUS = $arg;}, 
	"s|source:s" => sub { 
		my ($opt,$arg) = @_;
		error_handler('missing-arg',"$opt requires path.") if ! $arg;
		$SOURCE_DIRECTORY = $arg;},
	"quiet|silent" => sub { 
		$b_quiet = 1; 
		$LOG_LEVEL = 0 },
	"test" => sub { 
		$LOG_LEVEL = 3;
		$b_test = 1 },
	"V|verbose" => sub { 
		$LOG_LEVEL = 2 },
	"v|version" => sub { 
		print_version(); },
	'<>' => sub {
		my ($opt) = @_;
		error_handler('unsupported-option', "Unsupported option: $opt"); }
);

### EXECUTE / PROCESS MUSIC ###
set_display_output_data();
validate_start_text();
validate_log_level();
validate_nlink();
validate_fork();
validate_src_dest_directories();
validate_in_out_types();
error_handler('validation-errors', '');
set_basic_data();
clean_destination() if $b_clean;
sync_music_collections();
print_completion_message();

###**EOF**###
